{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description": "Template to bring up Puppet Master instance that can be used to bootstrap and manage Puppet Clients.",

    "Parameters" : {
        "InstanceType" : {
            "Description" : "EC2 instance type for PuppetMaster",
            "Default" : "t1.micro",
            "AllowedValues" : [ "t1.micro", "m1.small", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge" ],
            "ConstraintDescription" : "must contain only alphanumeric characters.",
            "Type" : "String"
        },
        "KeyName" : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the PuppetMaster",
            "Type" : "String"
        },
        "DNSName" : {
            "Default" : "ci-master",
            "Description" : "The dns name used by puppet client nodes to connect to this master",
            "Type" : "String"
        },
        "PuppetManifest" : {
            "Description" : "Location of package (Zip, GZIP or Git repository URL) that includes the puppet manifest",
            "Type" : "String"
        }
    },

    "Mappings" : {
        "AWSInstanceType2Arch" : {
            "t1.micro" : { "Arch" : "32" },
            "m1.small" : { "Arch" : "32" },
            "m1.large" : { "Arch" : "64" },
            "m1.xlarge" : { "Arch" : "64" },
            "m2.xlarge" : { "Arch" : "64" },
            "m2.2xlarge" : { "Arch" : "64" },
            "m2.4xlarge" : { "Arch" : "64" },
            "c1.medium" : { "Arch" : "32" },
            "c1.xlarge" : { "Arch" : "64" },
            "cc1.4xlarge" : { "Arch" : "64" }
        },
        "AWSRegionArch2AMI" : {
            "us-east-1" : { "32" : "ami-7f418316", "64" : "ami-7341831a" },
            "us-west-1" : { "32" : "ami-951945d0", "64" : "ami-971945d2" },
            "eu-west-1" : { "32" : "ami-24506250", "64" : "ami-20506254" },
            "ap-southeast-1" : { "32" : "ami-74dda626", "64" : "ami-7edda62c" },
            "ap-northeast-1" : { "32" : "ami-dcfa4edd", "64" : "ami-e8fa4ee9" }
        }
    },

    "Resources" : {
        "CFNInitUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Policies": [{
                    "PolicyName": "AccessForCFNInit",
                    "PolicyDocument" : {
                        "Statement": [{
                            "Effect" : "Allow",
                            "Action" : "cloudformation:DescribeStackResource",
                            "Resource" : "*"
                        }]
                    }
                }]
            }
        },

        "CFNKeys" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : { "Ref": "CFNInitUser" }
            }
        },

        "PuppetMasterInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "puppet" : [],
                                "puppet-server" : [],
                                "ruby-devel" : [],
                                "gcc" : [],
                                "make" : [],
                                "rubygems" : []
                            },
                            "rubygems" : {
                                "json" : []
                            }
                        },
                        "sources" : {
                            "/etc/puppet" : { "Ref" : "PuppetManifest" }
                        },
                        "files" : {
                            "/etc/yum.repos.d/epel.repo" : {
                                "source" : "https://s3.amazonaws.com/cloudformation-examples/enable-epel-on-amazon-linux-ami",
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/etc/puppet/autosign.conf" : {
                                "content" : "*.internal\n",
                                "mode" : "100644",
                                "owner" : "root",
                                "group" : "wheel"
                            },
                            "/etc/puppet/fileserver.conf" : {
                                "content" : "[modules]\n allow *.internal\n",
                                "mode" : "100644",
                                "owner" : "root",
                                "group" : "wheel"
                            },
                            "/etc/puppet/puppet.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "    logdir=/var/log/puppet\n",
                                            "    rundir=/var/run/puppet\n",
                                            "    ssldir=$vardir/ssl\n",
                                            "    pluginsync=true\n",
                                            "    dns_alt_names=", { "Ref" : "DNSName" }, "\n",
                                            "[agent]\n",
                                            "    classfile=$vardir/classes.txt\n",
                                            "    localconfig=$vardir/localconfig\n"
                                        ]
                                    ]
                                },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "services" : {
                            "sysvinit" : {
                                "puppetmaster" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true"

                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "SecurityGroupIds" : [ { "Fn::GetAtt" : [ "PuppetGroup", "GroupId" ] } ],
                "SubnetId" : { "Ref" : "DefaultSubnet" },
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        { "Ref" : "AWS::Region" },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                { "Ref" : "InstanceType" },
                                "Arch"
                            ]
                        }
                    ]
                },
                "KeyName" : { "Ref" : "KeyName" },
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "", [
                                "#!/bin/bash\n",
                                "/opt/aws/bin/cfn-init --region ", { "Ref" : "AWS::Region" },
                                " -s ", { "Ref" : "AWS::StackName" }, " -r PuppetMasterInstance ",
                                " --access-key ", { "Ref" : "CFNKeys" },
                                " --secret-key ", { "Fn::GetAtt" : ["CFNKeys", "SecretAccessKey"]}, "\n",
                                "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "PuppetMasterWaitHandle" }, "'\n"
                            ]
                        ]
                    }
                }
            } 
        },

        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway"
        },

        "CiVpc" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : "10.0.0.0/16",
                "EnableDnsHostnames" : "true"
            }
        },

        "VpcInternetGateway" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "InternetGatewayId" : { "Ref" : "InternetGateway" },
                "VpcId" : { "Ref" : "CiVpc" }
            }
        },

        "InternetGatewayRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "CiVpc" }
            }
        },

        "InternetRoute" : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : { "Ref" : "InternetGatewayRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "DefaultSubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "CidrBlock" : "10.0.0.0/16",
                "VpcId" : { "Ref" : "CiVpc" },
                "MapPublicIpOnLaunch" : "true"
            }
        },

        "SubnetRouteTable" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : { "Ref" : "InternetGatewayRouteTable" },
                "SubnetId" : { "Ref" : "DefaultSubnet" }
            }
        },

        "EC2SecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Group for clients to communicate with Puppet Master",
                "VpcId" : { "Ref" : "CiVpc" }
            }
        },

        "PuppetGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Group for puppet communication",
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "8140", "ToPort" : "8140", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "EC2SecurityGroup", "GroupId" ] }},
                    { "IpProtocol" : "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" }
                ],
                "VpcId" : { "Ref" : "CiVpc" }
            }
        },

        "PuppetMasterWaitHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },

        "PuppetMasterWaitCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "PuppetMasterInstance",
            "Properties" : {
                "Handle" : { "Ref" : "PuppetMasterWaitHandle" },
                "Timeout" : "600"
            }
        }
    },

    "Outputs" : {
        "PuppetMasterDNSName" : {
            "Value" : { "Fn::GetAtt" : [ "PuppetMasterInstance", "PrivateDnsName" ] },
            "Description" : "DNS Name of PuppetMaster"
        },
        "PuppetClientSecurityGroup" : {
            "Value" : { "Ref" : "EC2SecurityGroup" },
            "Description" : "Clients of the Puppet Master should be part of this security group"
        },
        "CiVpc" : {
            "Value" : { "Ref" : "CiVpc" },
            "Description" : "The CI environment VPC for other environments to peer with"
        }
    }
} 
